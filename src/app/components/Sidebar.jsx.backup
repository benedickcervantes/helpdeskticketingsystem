'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useAuth } from '../contexts/AuthContext';

const Sidebar = () => {
  const { currentUser, userProfile, logout } = useAuth();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [mounted, setMounted] = useState(false);
  const pathname = usePathname();

  useEffect(() => {
    setMounted(true);
    // Auto-collapse on smaller screens
    const handleResize = () => {
      if (window.innerWidth < 1024) {
        setIsCollapsed(true);
      }
    };
    
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const handleLogout = async () => {
    try {
      await logout();
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  const getDashboardLink = () => {
    if (userProfile?.role === 'admin') {
      return '/admin';
    } else if (userProfile?.role === 'manager') {
      return '/management';
    }
    return '/user';
  };

  const getDashboardText = () => {
    if (userProfile?.role === 'admin') {
      return 'Admin Dashboard';
    } else if (userProfile?.role === 'manager') {
      return 'Management';
    }
    return 'Dashboard';
  };

  const navigationItems = [
    {
      name: 'Dashboard',
      href: getDashboardLink(),
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
        </svg>
      ),
      roles: ['user', 'admin', 'manager']
    },
    {
      name: 'Tickets',
      href: '/user',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
      ),
      roles: ['user', 'admin', 'manager']
    },
    {
      name: 'Analytics',
      href: '/admin',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
      ),
      roles: ['admin', 'manager']
    },
    {
      name: 'User Management',
      href: '/admin',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
        </svg>
      ),
      roles: ['admin']
    },
    {
      name: 'Reports',
      href: '/management',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
      ),
      roles: ['admin', 'manager']
    }
  ];

  const filteredNavigation = navigationItems.filter(item => 
    !currentUser || item.roles.includes(userProfile?.role || 'user')
  );

  if (!mounted) return null;

  return (
    <div className={`
      fixed top-0 left-0 h-full bg-gray-900/95 backdrop-blur-xl border-r border-gray-700/50 z-50
      transition-all duration-300 ease-in-out
      ${isCollapsed ? 'w-16' : 'w-64'}
      shadow-2xl
    `}>
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-700/50">
        {!isCollapsed && (
          <Link href="/" className="flex items-center space-x-3 group">
            <div className="w-8 h-8 bg-gradient-to-br from-emerald-500 to-cyan-500 rounded-lg flex items-center justify-center shadow-lg group-hover:shadow-xl transition-all duration-300 group-hover:scale-105">
              <span className="text-white font-bold text-sm">H</span>
            </div>
            <div>
              <span className="text-lg font-bold text-white">HelpDesk Pro</span>
              <p className="text-xs text-gray-400 -mt-1">Enterprise IT</p>
            </div>
          </Link>
        )}
        
        {/* Collapse Toggle */}
        <button
          onClick={() => setIsCollapsed(!isCollapsed)}
          className="p-2 rounded-lg text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors duration-200"
        >
          <svg className={`w-5 h-5 transition-transform duration-200 ${isCollapsed ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
          </svg>
        </button>
      </div>

      {/* Navigation */}
      <nav className="flex-1 px-3 py-4 space-y-2">
        {filteredNavigation.map((item) => {
          const isActive = pathname === item.href || 
            (item.href !== '/' && pathname.startsWith(item.href));
          
          return (
            <Link
              key={item.name}
              href={item.href}
              className={`
                flex items-center px-3 py-2.5 rounded-xl text-sm font-medium transition-all duration-200 group relative
                ${isActive 
                  ? 'bg-gradient-to-r from-emerald-600/20 to-cyan-600/20 text-emerald-400 border border-emerald-500/30' 
                  : 'text-gray-300 hover:text-white hover:bg-gray-700/50'
                }
              `}
              title={isCollapsed ? item.name : ''}
            >
              <div className={`
                flex items-center justify-center w-5 h-5 transition-colors duration-200
                ${isActive ? 'text-emerald-400' : 'text-gray-400 group-hover:text-white'}
              `}>
                {item.icon}
              </div>
              
              {!isCollapsed && (
                <span className="ml-3 transition-opacity duration-200">
                  {item.name}
                </span>
              )}

              {/* Active indicator */}
              {isActive && (
                <div className="absolute left-0 top-1/2 -translate-y-1/2 w-1 h-6 bg-gradient-to-b from-emerald-400 to-cyan-400 rounded-r-full" />
              )}

              {/* Hover effect */}
              {!isActive && (
                <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-emerald-500/5 to-cyan-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
              )}
            </Link>
          );
        })}
      </nav>

      {/* User Profile Section */}
      {currentUser && (
        <div className="p-3 border-t border-gray-700/50">
          <div className={`
            flex items-center p-3 rounded-xl bg-gray-800/50 backdrop-blur-sm border border-gray-700/30
            ${isCollapsed ? 'justify-center' : 'space-x-3'}
          `}>
            <div className="w-8 h-8 bg-gradient-to-br from-emerald-500 to-cyan-500 rounded-lg flex items-center justify-center text-white font-semibold text-sm">
              {userProfile?.name?.charAt(0)?.toUpperCase() || 'U'}
            </div>
            
            {!isCollapsed && (
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-white truncate">
                  {userProfile?.name || 'User'}
                </p>
                <p className="text-xs text-gray-400 truncate">
                  {userProfile?.role || 'User'}
                </p>
              </div>
            )}

            <button
              onClick={handleLogout}
              className={`
                p-1.5 rounded-lg text-gray-400 hover:text-red-400 hover:bg-red-500/10 transition-colors duration-200
                ${isCollapsed ? 'w-full' : ''}
              `}
              title={isCollapsed ? 'Sign Out' : ''}
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
            </button>
          </div>
        </div>
      )}

      {/* Sign In Button for non-authenticated users */}
      {!currentUser && (
        <div className="p-3 border-t border-gray-700/50">
          <Link
            href="/auth"
            className={`
              flex items-center justify-center w-full px-3 py-2.5 rounded-xl text-sm font-medium
              bg-gradient-to-r from-emerald-600 to-cyan-600 hover:from-emerald-700 hover:to-cyan-700
              text-white transition-all duration-200 shadow-lg hover:shadow-xl
              ${isCollapsed ? 'px-2' : ''}
            `}
            title={isCollapsed ? 'Sign In' : ''}
          >
            {!isCollapsed && (
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
              </svg>
            )}
            {!isCollapsed && 'Sign In'}
          </Link>
        </div>
      )}
    </div>
  );
};

export default Sidebar;
